package com.practicum.testappshop.data.cart

import com.practicum.testappshop.domain.models.Product

interface CartRepository {
    /**
     * Добавляет продукт в корзину.
     *
     * Если продукт уже существует в корзине и количество товара меньше доступного на складе,
     * то количество увеличивается на 1. Если продукт не существует в корзине, он добавляется
     * с количеством 1. Если доступное количество товара исчерпано, добавление не происходит.
     *
     * @param product Продукт, который необходимо добавить в корзину. Должен содержать уникальный идентификатор
     *                и информацию о наличии на складе.
     * @return Возвращает true, если продукт был успешно добавлен в корзину, или false, если
     *         продукт не может быть добавлен (например, если его количество на складе исчерпано).
     */
    fun addProductToCart(product: Product):Boolean

    /**
     * Удаляет продукт из корзины.
     *
     * Если продукт существует в корзине и его количество больше 1, количество уменьшается на 1.
     * Если количество продукта достигает 0, продукт полностью удаляется из корзины.
     * Если продукт не найден в корзине, возвращается false.
     *
     * @param product Продукт, который необходимо удалить из корзины. Должен содержать уникальный идентификатор,
     *                чтобы правильно идентифицировать продукт в корзине.
     * @return Возвращает true, если продукт был успешно удален (или его количество уменьшено),
     *         или false, если продукт не найден в корзине.
     */
    fun deleteProductFromCart(product: Product):Boolean

    /**
     * Получает количество указанного продукта в корзине.
     *
     * Если продукт присутствует в корзине, возвращает его количество. Если продукт не найден,
     * возвращает 0.
     *
     * @param product Продукт, для которого нужно получить количество в корзине.
     * @return Количество указанного продукта в корзине. Возвращает 0, если продукт не найден.
     */
    fun getCountInCart(product: Product): Long

    /**
     * Получает все продукты из корзины.
     *
     * Возвращает словарь, где ключом является уникальный идентификатор продукта, а значением —
     * пара, содержащая продукт и его количество в корзине.
     *
     * @return Словарь продуктов в корзине, где ключ — идентификатор продукта, а значение — пара
     *         (Product, количество).
     */
    fun getCart(): Map<Long, Pair<Product, Long>>
}